#!/usr/bin/env node

'use strict'; // eslint-disable-line

const EOL = require('os').eol;
const fs = require('fs');
const homedir = require('os').homedir;
const path = require('path');
const program = require('commander');

const vaultclient = require('../index');

program.option('--host [HOST]', 'host where Vault is running (default to ' +
               'VAULT_HOST environment variable)')
       .option('--port [PORT]', 'port where Vault is running (default to ' +
               'VAULT_PORT environment variable)')
       .option('--https', 'use HTTPs instead of the default HTTP')
       .option('--cafile [FILE]', 'Authority certificate to use')
       .option('--noCaVerification', 'Allow untrusted certificate authority')
       .option('--config [PATH]', 'path where the configuration for ' +
                'vaultclient is (defaults to VAULT_CONFIG environment ' +
                'variable and ~/.vaultclient.conf in that order)');

function checkConfig(configObject) {
    if (!configObject) {
        throw new Error('invalid format');
    }
    if (!configObject.accessKey) {
        throw new Error('invalid access key');
    }
    if (!configObject.secretKeyValue) {
        throw new Error('invalid secret key value');
    }
}

function readConfigFile(configFilePath) {
    let actualPath = path.join(homedir(), '.vaultclient.conf');
    if (configFilePath) {
        actualPath = configFilePath;
    } else if(process.env.VAULT_CONFIG) {
        actualPath = process.env.VAULT_CONFIG;
    }
    try {
        const config = JSON.parse(fs.readFileSync(actualPath));
        checkConfig(config);
        return config;
    } catch (err) {
        throw new Error(`error reading config file: ${err}`);
    }
};

function action(cmd, fn, args) {
    if (typeof args !== 'object') {
        program.commands.find(c => c._name === cmd).outputHelp();
        process.exit(-1);
    }

    try {
        const useHttps = !!args.parent.https;
        const ca = args.parent.cafile ?
            fs.readFileSync(args.parent.cafile, 'ascii') : undefined;
        const untrusted = args.parent.noCaVerification ? true : false;
        const config = readConfigFile(args.parent.config);
        const client = new vaultclient.Client(
            args.parent.host ? args.parent.host : process.env.VAULT_HOST,
            Number.parseInt(args.parent.port ? args.parent.port :
                            process.env.VAULT_PORT, 10),
            useHttps,
            undefined,
            undefined,
            ca,
            untrusted,
            config.accessKey,
            config.secretKeyValue);
        fn(client, args);
    } catch (err) {
        //process.stderr.write(err.message + '\n');
        process.stderr.write(err + '\n');
        program.commands.find(c => c._name === cmd).outputHelp();
        process.exit(-1);
    }
}

function handleVaultResponse(err, data) {
    if (err) {
        process.stdout.write(JSON.stringify(err, null, 4) + '\n');
        process.exit(1);
    }
    if (process.stdout.write(JSON.stringify(data, null, 4) + '\n')) {
        process.exit(0);
    }
    process.stdout.on('drain', () => {
        process.exit(0);
    });
}

program
    .command('create-account')
    .option('--name <NAME>')
    .option('--email <EMAIL>')
    .option('--password <PASSWORD>')
    .action(action.bind(null, 'create-account', (client, args) => {
        client.createAccount(
            args.name, { email: args.email, password: args.password },
            handleVaultResponse);
    }));

program
    .command('list-account-users')
    .option('--name <NAME>', 'Name of account')
    .option('--marker [MARKER]', 'Marker for pagination')
    .option('--maxItems [MAXITEMS]', 'Max items per page')
    .option('--pathPrefix [PATHPREFIX]', 'Path prefix for arn search')
    .action(action.bind(null, 'list-account-users', (client, args) => {
        client.listAccountUsers(args.name, {
            marker: args.marker,
            maxItems: args.maxItems,
            pathPrefix: args.pathPrefix
        }, handleVaultResponse);
    }));

program
    .command('list-accounts')
    .option('--marker [MARKER]', 'Marker for pagination', parseInt)
    .option('--maxItems [MAXITEMS]', 'Max items for pagination', parseInt)
    .action(action.bind(null, 'list-accounts', (client, args) => {
        client.listAccounts({
            marker: args.marker,
            maxItems: args.maxItems,
        }, handleVaultResponse);
    }));

program
    .command('delete-account')
    .option('--name <NAME>')
    .action(action.bind(null, 'delete-account', (client, args) => {
        client.deleteAccount(args.name, handleVaultResponse);
    }));

program
    .command('create-user')
    .option('--account-name <ACCOUNT-NAME>')
    .option('--name <NAME>')
    .option('--email <EMAIL>')
    .option('--password <PASSWORD>')
    .action(action.bind(null, 'create-user', (client, args) => {
        client.createUser(args.accountName, args.name,
                          { email: args.email, password: args.password },
                          handleVaultResponse);
    }));

program
    .command('delete-user')
    .option('--account-name <ACCOUNT-NAME>')
    .option('--name <NAME>')
    .action(action.bind(null, 'delete-user', (client, args) => {
        client.deleteUser(args.accountName, args.name, handleVaultResponse);
    }));

program
    .command('create-access-key')
    .option('--account-name <ACCOUNT-NAME>')
    .option('--user-name [USER-NAME]')
    .action(action.bind(null, 'create-access-key', (client, args) => {
        client.createAccessKey(args.accountName, args.userName, {},
                               handleVaultResponse);
    }));

program
    .command('list-access-keys')
    .option('--account-name <ACCOUNT-NAME>', 'Name of account')
    .option('--user-name [USER-NAME]', 'User name')
    .option('--marker [MARKER]', 'Marker for pagination', parseInt)
    .option('--max-items [MAXITEMS]', 'Max items for pagination', parseInt)
    .action(action.bind(null, 'list-access-keys', (client, args) => {
        client.listAccessKeys(args.accountName, {
            userName: args.userName,
            marker: args.marker,
            maxItems: args.maxItems,
        }, handleVaultResponse);
    }));

program
    .command('delete-access-key')
    .option('--id <ID>')
    .action(action.bind(null, 'delete-access-key', (client, args) => {
        client.deleteAccessKey(args.id, handleVaultResponse);
    }));

program
    .command('*')
    .action(() => {
        program.outputHelp();
        process.exit(-1);
    });

if (process.argv.length > 2) {
    program.parse(process.argv);
} else {
    program.outputHelp();
    process.exit(-1);
}
